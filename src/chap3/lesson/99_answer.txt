[lesson3_1:C]
最初のprintln文は文字列＋整数となっているため、文字列結合が優先されるためANS:912となり、
次のprintln文は()で整数の結合が優先されるため(9+1)が優先され、10と評価したのちに、
文字列結合されるためANS:102となる。
従って選択肢Cが正解
※System.out.println("ANS:" + (9 + 1 + 2));とした場合、どうなるか考えてみよう。

[lesson3_2:B]
7/6の箇所は整数どうしの割り算になるためint/intの割り算と評価されるため1と評価されます。
その後、float型変数にキャストされるため1.0として評価・表示されます。
従って選択肢Bが正解
※選択肢Cのような1.166･･･と小数点以下の細かい精度を表示させるにはどうすればよいか考えて見ましょう。
double ans2 = 7.0 / 6.0;
→1666666666666667

[lesson3_3:B]
int型配列に対する代入時の型変換についての問題です。
char型→intは暗黙的に行われるためOK
1.0F、2.0のfloat、double型からintへのデータサイズが縮小する変換にはキャスト演算子が必要なため
5行目、6行目でコンパイルエラーが発生する。
従って選択肢Bが正解

[lesson3_4:C]
==演算子で左辺と右辺のデータ型が異なる場合でも、値が同じであればtrueと評価されます。
従って選択肢Cが正解

[lesson3_5:B]
最初のif文の||では左辺の(i < j)が(5 < 10)のため正と評価されるため、右辺の(k-- > j)が評価されません。
そのためkの値は15のまま「First if, value of k:15」と表示されます。
二つ目のif文では&&演算子の1番目の(i < j)が正と評価されますが、&&は右辺も評価するため、
--kが評価され15→14に、14 < 10で偽と評価されるため、2つ目のprintln文は表示されない。
最後のprintln文では「Out of if, k:14」と表示される。
従って変数kが15、14と表示されている選択肢Bが正解

[lesson3_6:E]
4行目にある条件演算子(ちなみに三項演算子とも言われます)はfalseになるので
右辺の99が代入されるため選択肢Eが正解

[lesson3_7:A,D,F]
switch文の式はbyte,char,short,int、およびそのラッパークラス、
enum型(列挙型)、Stringのいずれかの使用になるため、
double,floatおよびそのラッパークラスは使用できません。
選択肢ではA. int, D. Integer, F. Stringが使用できるため正解の選択肢はA,D,F

[lesson3_8:E]
switch文では大文字小文字が区別されるため最初の"orange"に合致する式がないため、
最後のdefault文のみ評価されるため選択肢Eが正解

[lesson3_9:D]
switchの式で指定しているnumはInteger型のため
case文の"10"や"100"は文字列となっているためコンパイルエラーが発生します。
そのため正解は選択肢D
10や100で指定されている場合はコンパイルエラーも発生せず、実行されBが表示されます。

[lesson3_10:D]
7行目の「1 | 2」の箇所はビット演算の論理和として計算されます。
1 → 0001
1 → 0010
=========
    0011 → 3と評価されます。
従って、case 0,case 1|2, case 10のいずれも実行されないため何も出力されません。
正解は選択肢D

[lesson3_11:B]
文字列の==演算子の比較の問題。
str1,str2ともに同じ"Java"という文字列クラスのオブジェクトになりますが、
インスタンスは別のオブジェクトになるため最初のif文は実行されません。("=="は表示されない)
二つ目のif文でequalsメソッドで同じ値（＝文字列か？）を比較しているためtrueとなりequalsが表示されます。
従って選択肢Bが正解。

[lesson3_12:C]
11と類似の問題。
変数str2にstr1と同じオブジェクトの参照先を代入しています。
そのため最初のif文の==もtrue、次のequalsもtrueを返すため==,equalsの両方が出力される。
正解は選択肢C

[lesson3_13:C]
※internは使わないし、試験にも出ないので例題が良くない
str1とstr2は別々のオブジェクトのため最初のprint文はfalse
str3にstr1.intern()としていますが、"Java"の文字列がメモリにある場合はその文字列の参照を帰すため、
str3=str2(str3にstr2の参照先を代入)と同様の結果になっている。
str1とstr3は別々のインスタンスを参照しているためfalse
str2とstr3は上記の理由から3番目のprint文はtrueとなる
そのためfalse false trueが表示されるため正解は選択肢C

[lesson3_14:C]
※引っ掛け問題
str.replaceとしていますが、置き換えた結果をどこにも代入していない。
そのため出力されるのはexistenceで正解は選択肢C
※文字列クラスは読み取り専用

[lesson3_15:C]
https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/lang/StringBuilder.html
上記URLのJavaDocにあるようにStringBuilderクラスの文字列削除はdelete(int start, int end)メソッド
になるため、選択肢C・D以外は間違い、
また文字列長を取得するのは、length()メソッドになるため、選択肢Cが正解

[lesson3_16:A]
 5|StringBuilder str = new StringBuilder("0123 456 ");
 6|if (str.length() == 9)  //true
 7|    str.insert(9, "abcde"); //0123 456 abcde
 8|str.delete(2, 5);    //01456 abcde
 9|System.out.println(str.indexOf("d"));    //9

正解は選択肢A

[lesson3_17:C]
文字列の-=の代入はできないためコンパイルエラーが発生する
正解は選択肢C

[lesson3_18:A]
Stringクラスのstr.concat(" dear");としてもどこにもだ乳していないためstr自体はHelloのまま、
StringBuilderクラスのsb.append(" dear");でHello dearとなっているため
出力は「str: Hello, sb: Hello dear」となり正解は選択肢Aとなる














